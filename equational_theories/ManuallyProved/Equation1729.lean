import Mathlib.Algebra.DirectSum.Basic
import Mathlib.GroupTheory.FreeGroup.Basic
import Mathlib.Data.ZMod.Defs
import Mathlib.Data.Countable.Defs

import equational_theories.Equations.All


namespace Eq1729

/- SM is the abelian group generated by countably many generators E n of order 4 -/

abbrev SM := DirectSum ℕ (fun _ ↦ ZMod 4)

open AddToMagma -- makes SM a magma automatically

instance SM_countable : Countable SM := by sorry

abbrev E (n:ℕ) : SM := (DirectSum.of (fun _ ↦ ZMod 4) n) 1

/- The squaring map on SM -/
def S (a : SM) := a ◇ a

lemma SM_square_eq_double (a : SM) : S a = a + a := rfl

lemma SM_square_square_eq_zero (a : SM) : S (S a) = 0 := by sorry

lemma SM_obeys_1729 : Equation1729 SM := by sorry

/- N is the free group generated by e_a for each a in SM -/

abbrev N := FreeGroup SM

instance N_countable : Countable N := by sorry

abbrev e (a:SM) := FreeGroup.of a

def adjacent (x y : N) := ∃ a, x = (e a) * y ∨ y = (e a) * x

/- Impose an order on N: y ≤ x if y is a right subword of x  (or equivalently, y is on the unique simple path from
1 to x).  -/

instance N_order : PartialOrder N  := by sorry

/-- the parent of x is defined to be the unique element adjacent to x whose reduced word is shorter, with the junk convention that the parent of the identity is itself -/
def parent (x : N) : N := by sorry

/- Right-multiplication by an element of SM on N is defined via the group action. -/

abbrev R' (a:SM) (x:N) := (e a) * x

/-- The R' operators are bijective -/
lemma R'_bijective (a:SM) : Function.Bijective (R' a) := by sorry

lemma R'_axiom_iia (a b : SM) (y:N) (h: a ≠ b): R' a y ≠ R' b y := by sorry

lemma R'_axiom_iib (a : SM) (y:N) : R' a y ≠ y := by sorry


end Eq1729
